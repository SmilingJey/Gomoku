package gomoku;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;

import javax.swing.ImageIcon;

public class Gomoku extends javax.swing.JFrame {

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Gomoku.getInstance().setVisible(true);
            }
        });
    }

    private static Gomoku instance;
    public GobanPanel gobanPanel = null;
    public GomokuAlg gomokuAlgorithm;

    private Gomoku() {
        initComponents();
        setSize(425, 450);
        setIconImage(new ImageIcon(this.getClass().getResource("icon.png")).getImage());
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        gobanPanel = new GobanPanel(15);
        add(gobanPanel, BorderLayout.CENTER);
        gomokuAlgorithm = new GomokuAlg(gobanPanel);
        gobanPanel.repaint();
    }

    public static Gomoku getInstance() {
        if (instance == null) {
            instance = new Gomoku();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gomoku");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(350, 350));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void doMove(int stoneColor) {
        gomokuAlgorithm.doMove(stoneColor);
    }

    public int isGameEnd() {
        boolean end = false;

        boolean gobamIsFill = true;
        for (int i = 0; i < gobanPanel.getGobanSize(); i++) {
            for (int j = 0; j < gobanPanel.getGobanSize(); j++) {
                if (gobanPanel.goban[i][j] == 0) {
                    gobamIsFill = false;
                    break;
                }
            }
            if (gobamIsFill == false) {
                break;
            }
        }

        if (gobamIsFill) {
            return 3;
        }

        if (check5inLine(GobanPanel.WHITE)) {
            return GobanPanel.WHITE;
        }
        if (check5inLine(GobanPanel.BLACK)) {
            return GobanPanel.BLACK;
        }
        return 0;
    }

    private boolean check5inLine(int c) {
        int len;
        //проверка по i (по столбцам)
        for (int i = 0; i < gobanPanel.getGobanSize(); i++) {
            len = 0;
            for (int j = 0; j < gobanPanel.getGobanSize(); j++) {
                if (gobanPanel.goban[i][j] == c) {
                    len++;
                } else {
                    len = 0;
                }
                if (len == 5) {
                    return true;
                }
            }
        }
        //проверка по j	(по строкам)
        for (int j = 0; j < gobanPanel.getGobanSize(); j++) {
            len = 0;
            for (int i = 0; i < gobanPanel.getGobanSize(); i++) {
                if (gobanPanel.goban[i][j] == c) {
                    len++;
                } else {
                    len = 0;
                }
                if (len == 5) {
                    return true;
                }
            }
        }
        //прверка по диагонали j++  i++
        for (int k = 0; k < gobanPanel.getGobanSize() - 3; k++) {
            len = 0;
            for (int j = k, i = 0; i < gobanPanel.getGobanSize() && j < gobanPanel.getGobanSize(); j++, i++) {
                if (gobanPanel.goban[i][j] == c) {
                    len++;
                } else {
                    len = 0;
                }
                if (len == 5) {
                    return true;
                }
            }
        }
        for (int k = 0; k < gobanPanel.getGobanSize() - 3; k++) {
            len = 0;
            for (int j = 0, i = k; i < gobanPanel.getGobanSize(); j++, i++) {
                if (gobanPanel.goban[i][j] == c) {
                    len++;
                } else {
                    len = 0;
                }
                if (len == 5) {
                    return true;
                }
            }
        }
        //проверка по диагонали i++  j--
        for (int k = 4; k < gobanPanel.getGobanSize(); k++) {
            len = 0;
            for (int i = k, j = 0; i >= 0; i--, j++) {
                if (gobanPanel.goban[i][j] == c) {
                    len++;
                } else {
                    len = 0;
                }
                if (len == 5) {
                    return true;
                }
            }
        }
        for (int k = 1; k < gobanPanel.getGobanSize() - 3; k++) {
            len = 0;
            for (int i = k, j = gobanPanel.getGobanSize() - 1; i < gobanPanel.getGobanSize(); j--, i++) {
                if (gobanPanel.goban[i][j] == c) {
                    len++;
                } else {
                    len = 0;
                }
                if (len == 5) {
                    return true;
                }
            }
        }

        return false;
    }

}
